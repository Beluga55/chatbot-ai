import { Chat, Feedback, imageChunks, imageFiles, Title, User } from '../db.js'
import jwt from 'jsonwebtoken'
import * as dotenv from 'dotenv'

dotenv.config()

// Function to verify the token
const verifyToken = (token) => {
  try {
    return jwt.verify(token, process.env.SECRET_KEY)
  } catch (error) {
    throw new Error('Invalid Token')
  }
}

// Function to delete the user's image
const deleteUserImage = async (profilePicture) => {
  const file = await imageFiles.findOne({ filename: profilePicture })
  if (!file) throw new Error('File not found')

  await imageChunks.deleteMany({ files_id: file._id })
  await imageFiles.deleteOne({ filename: profilePicture })
}

// Function to delete the user
const deleteUser = async (username) => {
  const user = await User.findOne({ username })
  if (!user) throw new Error('User not found')

  if (user.profilePicture) {
    await deleteUserImage(user.profilePicture)
  }

  await User.deleteOne({ username })
}

// Function to delete the chat messages of the user
const deleteChatMessages = async (username) => {
  const user = await User.findOne({ username })

  // GET THE USERNAME OF THE USER
  const userUsername = user.username

  // FIND THE CHAT TITLES GENERATED BY USER
  const chatTitles = await Title.find({ username: userUsername }).toArray()

  // EXTRACT THE CHAT ID FROM THE CHAT TITLES
  const chatIds = chatTitles.map((chatTitle) => chatTitle._id)

  // FIND THE CHAT MESSAGES BASED ON THE TITLE
  await Chat.deleteMany({ titleId: { $in: chatIds } })

  await Title.deleteMany({ username: userUsername })
}

// Function to delete the feedback of the user
const deleteFeedback = async (username) => {
  await Feedback.deleteMany({
    username,
  })
}

export const deleteAccount = async (req, res) => {
  try {
    const authHeader = req.header('Authorization')
    if (!authHeader) return res.status(401).json({ message: 'Access Denied' })

    const token = authHeader.split(' ')[1]
    verifyToken(token)

    const username = req.body.username
    await deleteChatMessages(username)
    await deleteUser(username)
    await deleteFeedback(username)

    res.status(200).json({ message: 'Account Deleted' })
  } catch (error) {
    console.error('Error deleting account:', error)
    res.status(500).json({ message: 'Error deleting account' })
  }
}
